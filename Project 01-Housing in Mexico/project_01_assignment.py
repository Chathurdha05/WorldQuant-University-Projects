# -*- coding: utf-8 -*-
"""Project 01-Assignment.ipynb

Automatically generated by Colab.



# **1.5. Housing in Brazil ðŸ‡§ðŸ‡·**
"""

import wqet_grader

wqet_grader.init("Project 1 Assessment")

"""In this assignment, you'll work with a dataset of homes for sale in Brazil. Your goal is to determine if there are regional differences in the real estate market. Also, you will look at southern Brazil to see if there is a relationship between home size and price, similar to what you saw with housing in some states in Mexico.

Before you start: Import the libraries you'll use in this notebook: Matplotlib, pandas, and plotly. Be sure to import them under the aliases we've used in this project.
"""

# Import Matplotlib, pandas, and plotly
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px

"""## **Prepare Data**

In this assignment, you'll work with real estate data from Brazil. In the data directory for this project there are two CSV that you need to import and clean, one-by-one.

## **Import**

First, you are going to import and clean the data in data/brasil-real-estate-1.csv

**Task 1.5.1:** Import the CSV file data/brasil-real-estate-1.csv into the DataFrame df1.
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

# Import the CSV file into a DataFrame
df1 = pd.read_csv('data/brasil-real-estate-1.csv')
print(df1.head())

# Display the first few rows of the DataFrame to verify the data
print(df1.head())

# Check for missing values and data types to prepare for cleaning
print(df1.info())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.1", df1)

"""Before you move to the next task, take a moment to inspect df1 using the info and head methods. What issues do you see in the data? What cleaning will you need to do before you can conduct your analysis?

**Task 1.5.2:** Drop all rows with NaN values from the DataFrame df1.
"""

import pandas as pd
df1 = pd.read_csv('data/brasil-real-estate-1.csv')
print(f"Rows before dropping NaN: {len(df1)}")
df1 = df1.dropna()
print(f"Rows after dropping NaN: {len(df1)}")
print(df1.head())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.2", df1)

"""**Task 1.5.3:** Use the "lat-lon" column to create two separate columns in df1: "lat" and "lon". Make sure that the data type for these new columns is float."""

df1 = pd.read_csv('data/brasil-real-estate-1.csv')

# Drop rows with missing values in the 'lat-lon' column
df1 = df1.dropna(subset=['lat-lon'])

print("df1 shape after dropping NaNs:", df1.shape)

# Split 'lat-lon' into 'lat' and 'lon'
df1[['lat', 'lon']] = df1['lat-lon'].str.split(',', expand=True)

# Ensure lat and lon are float type
df1['lat'] = df1['lat'].astype(float)
df1['lon'] = df1['lon'].astype(float)

print("df1 shape after cleaning:", df1.shape)

df1.head()

wqet_grader.grade("Project 1 Assessment", "Task 1.5.3", df1)

"""**Task 1.5.4:** Use the "place_with_parent_names" column to create a "state" column for df1. (Note that the state name always appears after "|Brasil|" in each string.)"""

# Extract the state by splitting the string and selecting the part after 'Brasil' and before the next '|'
df1['state'] = df1['place_with_parent_names'].str.split('|').str[2]

# Print the updated DataFrame to check the state extraction
print(df1[['place_with_parent_names', 'state']].head())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.4", df1)

"""**Task 1.5.5:** Transform the "price_usd" column of df1 so that all values are floating-point numbers instead of strings."""

# Remove dollar signs and commas from the "price_usd" column
df1['price_usd'] = df1['price_usd'].str.replace('[\$,]', '', regex=True)

# Convert the cleaned "price_usd" column to floating-point numbers
df1['price_usd'] = df1['price_usd'].astype(float)

# Print the updated DataFrame to verify the changes
print(df1[['price_usd']].head())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.5", df1)

"""**Task 1.5.6:** Drop the "lat-lon" and "place_with_parent_names" columns from df1."""

# Drop the "lat-lon" and "place_with_parent_names" columns
df1 = df1.drop(columns=['lat-lon', 'place_with_parent_names'])

# Print the updated DataFrame to verify the columns are removed
print(df1.head())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.6", df1)

"""Now that you have cleaned data/brasil-real-estate-1.csv and created df1, you are going to import and clean the data from the second file, brasil-real-estate-2.csv.

**Task 1.5.7:** Import the CSV file brasil-real-estate-2.csv into the DataFrame df2.
"""

df2 = pd.read_csv('data/brasil-real-estate-2.csv')

wqet_grader.grade("Project 1 Assessment", "Task 1.5.7", df2)

"""Before you jump to the next task, take a look at df2 using the info and head methods. What issues do you see in the data? How is it similar or different from df1?"""

df2.head()
df2.info()

"""**Task 1.5.8:** Use the "price_brl" column to create a new column named "price_usd". (Keep in mind that, when this data was collected in 2015 and 2016, a US dollar cost 3.19 Brazilian reals.)"""

# Convert "price_brl" to "price_usd" using the exchange rate (1 USD = 3.19 BRL)
df2['price_usd'] = df2['price_brl'] / 3.19

# Display the first few rows to verify the new column
print(df2[['price_brl', 'price_usd']].head())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.8", df2)

"""**Task 1.5.9:** Drop the "price_brl" column from df2, as well as any rows that have NaN values."""

# Drop the "price_brl" column from df2
df2 = df2.drop(columns=['price_brl'])

# Drop rows with NaN values in any column
df2 = df2.dropna()

# Display the updated DataFrame to verify the changes
print(df2.head())

wqet_grader.grade("Project 1 Assessment", "Task 1.5.9", df2)

"""OK! Now that you've cleaned the data from both CSV files and created df1 and df2, it's time to combine them into a single DataFrame.

**Task 1.5.10:** Concatenate df1 and df2 to create a new DataFrame named df.
"""

df = pd.concat([df1, df2])
print("df shape:", df.shape)

wqet_grader.grade("Project 1 Assessment", "Task 1.5.10", df)

"""**Frequent Question:** I can't pass this question, and I don't know what I've done wrong. ðŸ˜  What's happening?

Tip: In this assignment, you're working with data that's similar â€” but not identical â€” the data used in the lessons. That means that you might need to make adjust the code you used in the lessons to work here. Take a second look at df1 after you complete 1.5.6, and make sure you've correctly created the state names.

## **Explore**

It's time to start exploring your data. In this section, you'll use your new data visualization skills to learn more about the regional differences in the Brazilian real estate market.

Complete the code below to create a scatter_mapbox showing the location of the properties in df.
"""

fig = px.scatter_mapbox(
    df,
    lat="lat",
    lon="lon",
    center={"lat": -14.2, "lon": -51.9},  # Map will be centered on Brazil
    width=600,
    height=600,
    hover_data=["price_usd"],  # Display price when hovering mouse over house
)

fig.update_layout(mapbox_style="open-street-map")

fig.show()

"""**Task 1.5.11:** Use the describe method to create a DataFrame summary_stats with the summary statistics for the "area_m2" and "price_usd" columns."""

# Generate summary statistics for "area_m2" and "price_usd"
summary_stats = df[['area_m2', 'price_usd']].describe()

# Print or check the summary statistics
print(summary_stats)

wqet_grader.grade("Project 1 Assessment", "Task 1.5.11", summary_stats)

"""**Task 1.5.12:** Create a histogram of "price_usd". Make sure that the x-axis has the label "Price [USD]", the y-axis has the label "Frequency", and the plot has the title "Distribution of Home Prices". Use Matplotlib (plt)."""

# Build histogram
plt.hist(df["price_usd"])


# Label axes
plt.xlabel("Price [USD]")
plt.ylabel("Frequency")

# Add title
plt.title("Distribution of Home Prices")

# Don't change the code below ðŸ‘‡
plt.savefig("images/1-5-12.png", dpi=150)

with open("images/1-5-12.png", "rb") as file:
    wqet_grader.grade("Project 1 Assessment", "Task 1.5.12", file)

"""**Task 1.5.13:** Create a horizontal boxplot of "area_m2". Make sure that the x-axis has the label "Area [sq meters]" and the plot has the title "Distribution of Home Sizes". Use Matplotlib (plt)."""

# Build box plot
plt.boxplot(df["area_m2"], vert=False)


# Label x-axis
plt.xlabel("Area [sq meters]")


# Add title
plt.title("Distribution of Home Sizes")

# Don't change the code below ðŸ‘‡
plt.savefig("images/1-5-13.png", dpi=150)

with open("images/1-5-13.png", "rb") as file:
    wqet_grader.grade("Project 1 Assessment", "Task 1.5.13", file)

"""**Task 1.5.14:** Use the groupby method to create a Series named mean_price_by_region that shows the mean home price in each region in Brazil, sorted from smallest to largest."""

# Group by "region" and calculate the mean home price in each region
mean_price_by_region = df.groupby('region')['price_usd'].mean().sort_values()

# Display the resulting Series
print(mean_price_by_region)

wqet_grader.grade("Project 1 Assessment", "Task 1.5.14", mean_price_by_region)

"""**Task 1.5.15:** Use mean_price_by_region to create a bar chart. Make sure you label the x-axis as "Region" and the y-axis as "Mean Price [USD]", and give the chart the title "Mean Home Price by Region". Use pandas."""

# Build bar chart, label axes, add title
mean_price_by_region.plot(
    kind="bar",
    xlabel="Region",
    ylabel="Mean Price [USD]",
    title="Mean Home Price by Region",

);

# Don't change the code below ðŸ‘‡
plt.savefig("images/1-5-15.png", dpi=150)

with open("images/1-5-15.png", "rb") as file:
    wqet_grader.grade("Project 1 Assessment", "Task 1.5.15", file)

"""Keep it up! You're halfway through your data exploration. Take one last break and get ready for the final push. ðŸš€

You're now going to shift your focus to the southern region of Brazil, and look at the relationship between home size and price.

**Task 1.5.16:** Create a DataFrame df_south that contains all the homes from df that are in the "South" region.
"""

# Filter rows where the "region" is "South"
df_south = df[df['region'] == 'South']

# Display the first few rows of df_south to verify
df_south.head()

wqet_grader.grade("Project 1 Assessment", "Task 1.5.16", df_south)

"""**Task 1.5.17:** Use the value_counts method to create a Series homes_by_state that contains the number of properties in each state in df_south."""

# Use value_counts() to count the number of properties in each state in df_south
homes_by_state = df_south['state'].value_counts()

# Display the resulting Series
homes_by_state

wqet_grader.grade("Project 1 Assessment", "Task 1.5.17", homes_by_state)

"""**Task 1.5.18:** Create a scatter plot showing price vs. area for the state in df_south that has the largest number of properties. Be sure to label the x-axis "Area [sq meters]" and the y-axis "Price [USD]"; and use the title "<name of state>: Price vs. Area". Use Matplotlib (plt).

**Tip:** You should replace <name of state> with the name of the state that has the largest number of properties.
"""

# Subset data
df_south_rgs = df_south[df_south['state'] == "Rio Grande do Sul"]

# Build scatter plot
plt.scatter(x=df_south_rgs['area_m2'], y=df_south_rgs['price_usd'])

# Label axes
plt.xlabel("Area [sq meters]")
plt.ylabel("Price [USD]")

# Add title
plt.title("Rio Grande do Sul : Price vs. Area")

# Don't change the code below ðŸ‘‡
plt.savefig("images/1-5-18.png", dpi=150)

with open("images/1-5-18.png", "rb") as file:
    wqet_grader.grade("Project 1 Assessment", "Task 1.5.18", file)

"""**Task 1.5.19:** Create a dictionary south_states_corr, where the keys are the names of the three states in the "South" region of Brazil, and their associated values are the correlation coefficient between "area_m2" and "price_usd" in that state.

As an example, here's a dictionary with the states and correlation coefficients for the Southeast region. Since you're looking at a different region, the states and coefficients will be different, but the structure of the dictionary will be the same.
"""

{'EspÃ­rito Santo': 0.6311332554173303,
 'Minas Gerais': 0.5830029036378931,
 'Rio de Janeiro': 0.4554077103515366,
 'SÃ£o Paulo': 0.45882050624839366}

# Create a list of the South region states
south_states = ['ParanÃ¡', 'Rio Grande do Sul', 'Santa Catarina']

# Initialize an empty dictionary to store the correlation coefficients
south_states_corr = {}

# Loop through each state and calculate the correlation coefficient
for state in south_states:
    # Filter df_south for the current state
    df_state = df_south[df_south['state'] == state]

    # Calculate the correlation coefficient between 'area_m2' and 'price_usd'
    correlation = df_state['area_m2'].corr(df_state['price_usd'])

    # Add the state and its correlation to the dictionary
    south_states_corr[state] = correlation

# Display the dictionary
print(south_states_corr)

wqet_grader.grade("Project 1 Assessment", "Task 1.5.19", south_states_corr)

"""Copyright 2024 WorldQuant University. This content is licensed solely for personal use. Redistribution or publication of this material is strictly prohibited."""
